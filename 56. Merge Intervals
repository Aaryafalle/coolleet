import java.util.*;

public class Solution {
    public int[][] merge(int[][] intervals) {
        // Step 1: Sort intervals by starting time
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

        List<int[]> ans = new ArrayList<>();
        
        // Step 2: Add the first interval
        ans.add(intervals[0]);

        // Step 3: Start loop from the second interval
        for (int i = 1; i < intervals.length; i++) {
            int[] current = intervals[i];
            int[] last = ans.get(ans.size() - 1);

            if (current[0] <= last[1]) {
                // ðŸ§© They overlap â†’ merge by updating the end
                last[1] = Math.max(last[1], current[1]);
            } else {
                // ðŸšª No overlap â†’ add the interval as it is
                ans.add(current);
            }
        }

        // Convert result to 2D array
        return ans.toArray(new int[ans.size()][]);
    }
}
